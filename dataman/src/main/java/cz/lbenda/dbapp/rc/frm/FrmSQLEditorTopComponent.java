/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cz.lbenda.dbapp.rc.frm;

import cz.lbenda.dbapp.actions.RunSQLCookie;
import cz.lbenda.dbapp.rc.SessionConfiguration;
import cz.lbenda.gui.editor.HighlighterSQL;
import cz.lbenda.gui.editor.TextEditor;
import javafx.embed.swing.JFXPanel;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.util.NbBundle.Messages;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;
import org.openide.windows.TopComponent;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.swing.*;
import java.awt.*;
import java.sql.ResultSet;
import java.util.*;

/**
 * Top component which displays something.
 */
@TopComponent.Description(
        preferredID = "FrmSQLEditorTopComponent",
        iconBase = "cz/lbenda/dbapp/rc/frm/sqlEditor.png",
        persistenceType = TopComponent.PERSISTENCE_NEVER//TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = true)//mode = "bottomSlidingSide", openAtStartup = false)
@Messages({
})
public final class FrmSQLEditorTopComponent extends TopComponent implements ExplorerManager.Provider {

  private static final Logger LOG = LoggerFactory.getLogger(FrmSQLEditorTopComponent.class);
  private final ExplorerManager em = new ExplorerManager();
  private final InstanceContent ic = new InstanceContent();
  private JFXPanel jfxPanel;
  private TextEditor textEditor;
  private final SessionConfiguration sc;

  public FrmSQLEditorTopComponent(SessionConfiguration sc) {
    initComponents();
    this.sc = sc;
    setName(Bundle.CTL_FrmSQLEditorTopComponent());
    setToolTipText(Bundle.HINT_FrmSQLEditorTopComponent());
    setLayout(new BorderLayout());
    ic.add((RunSQLCookie) () -> {
      if (sc != null) {
        ResultSet rs = sc.getReader().executeSQL(textEditor.getText());
      } // TODO zapsat ze neni SC
    });
    ic.add(em);
    ic.add(getActionMap());
    associateLookup(new AbstractLookup(ic));
  }

  @Override
  public ExplorerManager getExplorerManager() {
    return em;
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT
   * modify this code. The content of this method is always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    GroupLayout layout = new GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGap(0, 400, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(GroupLayout.Alignment.LEADING)
      .addGap(0, 300, Short.MAX_VALUE)
    );
  }// </editor-fold>//GEN-END:initComponents

  // Variables declaration - do not modify//GEN-BEGIN:variables
  // End of variables declaration//GEN-END:variables
  @Override
  public void componentOpened() {
    jfxPanel = new JFXPanel();
    textEditor = new TextEditor();
    textEditor.changeHighlighter(new HighlighterSQL());
    jfxPanel.setScene(textEditor.createScene());
    add(jfxPanel, BorderLayout.CENTER);
  }

  @Override
  public void componentClosed() {
    remove(jfxPanel);
    jfxPanel = null;
    textEditor = null;
  }

  void writeProperties(Properties p) {
    // better to version settings since initial version as advocated at
    // http://wiki.apidesign.org/wiki/PropertyFiles
    p.setProperty("version", "1.0");
    // TODO store your settings
  }

  void readProperties(Properties p) {
    String version = p.getProperty("version");
    // TODO read your settings according to their version
  }
}
