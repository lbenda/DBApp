/*
 * Copyright 2014 Lukas Benda <lbenda at lbenda.cz>.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package cz.lbenda.dbapp.rc.frm;

import cz.lbenda.dbapp.rc.db.Column;
import cz.lbenda.dbapp.rc.db.TableDescription;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.SpringLayout;
import layout.SpringUtilities;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/** This component is used for show edit form (and editing) of chosen record
 * {@see ChosenTable#getSelectedRowValues} in chosen table {@see ChosenTable#getTableDescription}
 */
@ConvertAsProperties(
        dtd = "-//cz.lbenda.applicationdb.rc.frm//FrmEditForm//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "FrmEditFormTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "properties", openAtStartup = true)
@ActionID(category = "Window", id = "cz.lbenda.applicationdb.rc.frm.FrmEditFormTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_FrmEditFormAction",
        preferredID = "FrmEditFormTopComponent"
)
@Messages({
  "CTL_FrmEditFormAction=Upravovat",
  "CTL_FrmEditFormTopComponent=Upravovat",
  "HINT_FrmEditFormTopComponent=Upravit vybraný řádek"
})
public final class FrmEditFormTopComponent extends TopComponent implements ChosenTable.ChosenRowListener, ChosenTable.ChosenTableListener {

  private static Logger LOG = LoggerFactory.getLogger(FrmEditFormTopComponent.class);

  public FrmEditFormTopComponent() {
    initComponents();
    setName(Bundle.CTL_FrmEditFormTopComponent());
    setToolTipText(Bundle.HINT_FrmEditFormTopComponent());
    ChosenTable.getInstance().addTableListener(this);
    ChosenTable.getInstance().addRowListener(this);
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT
   * modify this code. The content of this method is always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    tBar = new javax.swing.JToolBar();
    jButton1 = new javax.swing.JButton();
    jButton3 = new javax.swing.JButton();
    jButton2 = new javax.swing.JButton();
    pForm = new javax.swing.JPanel();

    tBar.setRollover(true);

    org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(FrmEditFormTopComponent.class, "FrmEditFormTopComponent.jButton1.text")); // NOI18N
    jButton1.setActionCommand(org.openide.util.NbBundle.getMessage(FrmEditFormTopComponent.class, "FrmEditFormTopComponent.jButton1.actionCommand")); // NOI18N
    jButton1.setFocusable(false);
    jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    jButton1.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton1ActionPerformed(evt);
      }
    });
    tBar.add(jButton1);

    org.openide.awt.Mnemonics.setLocalizedText(jButton3, org.openide.util.NbBundle.getMessage(FrmEditFormTopComponent.class, "FrmEditFormTopComponent.jButton3.text")); // NOI18N
    jButton3.setActionCommand(org.openide.util.NbBundle.getMessage(FrmEditFormTopComponent.class, "FrmEditFormTopComponent.jButton3.actionCommand")); // NOI18N
    jButton3.setFocusable(false);
    jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    jButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    jButton3.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton3ActionPerformed(evt);
      }
    });
    tBar.add(jButton3);

    org.openide.awt.Mnemonics.setLocalizedText(jButton2, org.openide.util.NbBundle.getMessage(FrmEditFormTopComponent.class, "FrmEditFormTopComponent.jButton2.text")); // NOI18N
    jButton2.setActionCommand(org.openide.util.NbBundle.getMessage(FrmEditFormTopComponent.class, "FrmEditFormTopComponent.jButton2.actionCommand")); // NOI18N
    jButton2.setFocusable(false);
    jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    jButton2.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton2ActionPerformed(evt);
      }
    });
    tBar.add(jButton2);

    javax.swing.GroupLayout pFormLayout = new javax.swing.GroupLayout(pForm);
    pForm.setLayout(pFormLayout);
    pFormLayout.setHorizontalGroup(
      pFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 332, Short.MAX_VALUE)
    );
    pFormLayout.setVerticalGroup(
      pFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 232, Short.MAX_VALUE)
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(tBar, javax.swing.GroupLayout.DEFAULT_SIZE, 332, Short.MAX_VALUE)
      .addComponent(pForm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addComponent(tBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(pForm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
  }// </editor-fold>//GEN-END:initComponents

  private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    Map<Column, Object> newValues = new HashMap<>(td.getColumns().size());
    for (Map.Entry<Column, JComponent> entry : this.editFields.entrySet()) {
      GUITDExtensionHelper.componentToValues(newValues, entry.getValue(), entry.getKey());
    }
    if (selectedRowValues != null && !selectedRowValues.isEmpty()) {
      td.getSessionConfiguration().getReader().updateRow(td, this.selectedRowValues, newValues);
      ChosenTable.getInstance().updateRowValues(td, selectedRowValues, newValues);
      ChosenTable.getInstance().setSelectedRowValues(newValues);
    } else {
      td.getSessionConfiguration().getReader().insertRow(td, newValues);
      ChosenTable.getInstance().updateRowValues(td, null, newValues);
      ChosenTable.getInstance().setSelectedRowValues(newValues);
    }
  }//GEN-LAST:event_jButton1ActionPerformed

  private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
    this.rowChosen(ChosenTable.getInstance().getSelectedRowValues());
  }//GEN-LAST:event_jButton2ActionPerformed

  private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
    this.selectedRowValues = new HashMap<>();
    this.valuesToFields(selectedRowValues);
  }//GEN-LAST:event_jButton3ActionPerformed

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton jButton1;
  private javax.swing.JButton jButton2;
  private javax.swing.JButton jButton3;
  private javax.swing.JPanel pForm;
  private javax.swing.JToolBar tBar;

  // End of variables declaration//GEN-END:variables
  @Override
  public void componentOpened() {
  }

  @Override
  public void componentClosed() {
    // TODO add custom code on component closing
  }

  void writeProperties(java.util.Properties p) {
    // better to version settings since initial version as advocated at
    // http://wiki.apidesign.org/wiki/PropertyFiles
    p.setProperty("version", "1.0");
    // TODO store your settings
  }

  void readProperties(java.util.Properties p) {
    String version = p.getProperty("version");
    // TODO read your settings according to their version
  }

  private Map<Column, JComponent> editFields = new HashMap<>();

  private Map<Column, Object> selectedRowValues;
  private TableDescription td;

  public final void valuesToFields(final Map<Column, Object> values) {
    for (Column column : td.getColumns()) {
      GUITDExtensionHelper.componentValue(values, editFields.get(column), column);
    }
  }

  @Override
  public final void rowChosen(final Map<Column, Object> selectedRowValues) {
    this.selectedRowValues = selectedRowValues;
    valuesToFields(selectedRowValues);
  }

  @Override
  public final void tableChosen(final TableDescription tableDescription) {
    this.td = tableDescription;
    this.generateForm(tableDescription);
  }

  private void generateForm(final TableDescription td) {
    editFields.clear();
    this.pForm.removeAll();
    pForm.setLayout(new SpringLayout());
    for (Column column : td.getColumns()) {
      final JComponent field = GUITDExtensionHelper.editComponent(column);
      editFields.put(column, field);
      JLabel l = new JLabel(String.format("%s: ", column.getName()), JLabel.TRAILING);
      pForm.add(l);
      l.setLabelFor(field);
      pForm.add(field);
    }
    SpringUtilities.makeCompactGrid(pForm,
            td.getColumns().size(), 2, //rows, cols
            6, 6,        //initX, initY
            6, 6);       //xPad, yPad
  }
}
