/*
 * Copyright 2014 Lukas Benda <lbenda at lbenda.cz>.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package cz.lbenda.dbapp.rc.frm;

import cz.lbenda.dbapp.rc.db.Column;
import cz.lbenda.dbapp.rc.db.DbStructureReader.ForeignKey;
import cz.lbenda.dbapp.rc.db.TableDescription;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javax.swing.table.AbstractTableModel;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author Lukas Benda <lbenda at lbenda.cz>
 */
public class PanelJoinTable extends javax.swing.JPanel implements ChosenTable.ChosenRowListener {

  @SuppressWarnings("unused")
  private static final Logger LOG = LoggerFactory.getLogger(PanelJoinTable.class);

  private final TDTableModel model;
  private final boolean masterTable;

  /** Creates new form PanelJoinTable
   * @param fk foreign key which describe relationship between
   * @param masterTable flag which describe from which side of connection is used (master - exported keys)
   */
  public PanelJoinTable(final ForeignKey fk, final boolean masterTable) {
    initComponents();
    ChosenTable.getInstance().addRowListener(this);
    this.masterTable = masterTable;
    model = new TDTableModel(masterTable ? fk.getMasterTable() : fk.getSlaveTable(), fk);
    jTable1.setModel(model);
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT
   * modify this code. The content of this method is always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jScrollPane1 = new javax.swing.JScrollPane();
    jTable1 = new javax.swing.JTable();
    jToolBar1 = new javax.swing.JToolBar();

    jTable1.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][] {
        {null, null, null, null},
        {null, null, null, null},
        {null, null, null, null},
        {null, null, null, null}
      },
      new String [] {
        "Title 1", "Title 2", "Title 3", "Title 4"
      }
    ));
    jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
    jScrollPane1.setViewportView(jTable1);

    jToolBar1.setRollover(true);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
      .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
        .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE))
    );
  }// </editor-fold>//GEN-END:initComponents


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JTable jTable1;
  private javax.swing.JToolBar jToolBar1;
  // End of variables declaration//GEN-END:variables

  @Override
  public final void rowChosen(final Map<Column, Object> selectedRowValues) {
    model.setMasterRowValues(selectedRowValues);
  }

  private final class TDTableModel extends AbstractTableModel {

    private final TableDescription td;
    private final ForeignKey fk;
    private final List<Object[]> rows = new ArrayList<>();
    private int skipColumn;

    public TDTableModel(TableDescription td, ForeignKey fk) {
      this.td = td;
      this.fk = fk;
      int i = 0;
      for (Column col : td.getColumns()) {
        if (fk.getSlaveColumn().equals(col)) { skipColumn = i; }
        i++;
      }
    }

    public void setMasterRowValues(final Map<Column, Object> selectedRowValues) {
      this.rows.clear();
      this.rows.addAll(td.getSessionConfiguration().getReader().getJoinedRows(fk, selectedRowValues, !masterTable));
      this.fireTableDataChanged();
    }

    @Override
    public String getColumnName(int column) {
      if (skipColumn <= column) {
        return td.getColumns().get(column + 1).getName();
      }
      return td.getColumns().get(column).getName();
    }

    @Override
    public int getRowCount() {
      return rows.size();
    }

    @Override
    public int getColumnCount() {
      return td.getColumns().size() - 1; // Skip join column from one side
    }

    @Override
    public Object getValueAt(int rowIndex, int columnIndex) {
      if (skipColumn <= columnIndex) {
        return rows.get(rowIndex)[columnIndex + 1];
      }
      return rows.get(rowIndex)[columnIndex];
    }
  }
}
