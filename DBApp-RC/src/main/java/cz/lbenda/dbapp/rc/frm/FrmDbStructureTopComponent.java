/*
 * Copyright 2014 Lukas Benda <lbenda at lbenda.cz>.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package cz.lbenda.dbapp.rc.frm;

import cz.lbenda.dbapp.rc.SessionConfiguration;
import cz.lbenda.dbapp.rc.db.TableDescription;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.HashMap;
import java.util.Map;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreePath;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//cz.lbenda.applicationdb.rc.frm//FrmDbStructure//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "FrmDbStructureTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "explorer", openAtStartup = true)
@ActionID(category = "Window", id = "cz.lbenda.applicationdb.rc.frm.FrmDbStructureTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_FrmDbStructureAction",
        preferredID = "FrmDbStructureTopComponent"
)
@Messages({
  "CTL_FrmDbStructureAction=Struktura",
  "CTL_FrmDbStructureTopComponent=Struktura",
  "HINT_FrmDbStructureTopComponent=Struktura datab√°ze"
})
public final class FrmDbStructureTopComponent extends TopComponent implements ChosenTable.SessionChangeListener {

  private static final Logger LOG = LoggerFactory.getLogger(FrmDbStructureTopComponent.class);

  private SessionConfiguration sc = null;

  public FrmDbStructureTopComponent() {
    initComponents();
    setName(Bundle.CTL_FrmDbStructureTopComponent());
    setToolTipText(Bundle.HINT_FrmDbStructureTopComponent());

    ChosenTable.getInstance().addSessionChangeListener(this);
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT
   * modify this code. The content of this method is always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jScrollPane1 = new javax.swing.JScrollPane();
    jTree1 = new javax.swing.JTree();

    javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
    jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
    jScrollPane1.setViewportView(jTree1);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
    );
  }// </editor-fold>//GEN-END:initComponents

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JTree jTree1;
  // End of variables declaration//GEN-END:variables
  @Override
  public void componentOpened() {
    showStructure(sc);

    MouseListener ml = new MouseAdapter() {
      @Override
      public void mousePressed(MouseEvent e) {
        int selRow = jTree1.getRowForLocation(e.getX(), e.getY());
        TreePath selPath = jTree1.getPathForLocation(e.getX(), e.getY());
        if (selPath != null) {
          if(selRow != -1) {
            if(e.getClickCount() == 2) {
              DefaultMutableTreeNode nod = (DefaultMutableTreeNode) selPath.getLastPathComponent();
              if (TableDescription.class.equals(nod.getUserObject().getClass())) {
                selectTable((TableDescription) nod.getUserObject());
              }
            }
          }
        }
    }};
    jTree1.addMouseListener(ml);
  }

  private void showStructure(SessionConfiguration sc) {
    DefaultMutableTreeNode rootNode = new DefaultMutableTreeNode("Root Node");
    TreeModel model = new DefaultTreeModel(rootNode);
    if (sc != null) {
      String catalog = null, schema = null, tableType = null;
      Map<String, DefaultMutableTreeNode> catalogNodes = new HashMap<>();
      Map<String, DefaultMutableTreeNode> schemaNodes = new HashMap<>();
      Map<String, DefaultMutableTreeNode> tableTypesNodes = new HashMap<>();

      for (TableDescription tableDescription : sc.getTableDescriptions()) {
        if (sc.isShowTable(tableDescription)) {
          if (sc.isShowCatalog(tableDescription.getCatalog())) {
            if (!catalogNodes.containsKey(tableDescription.getCatalog())) {
              catalogNodes.put(tableDescription.getCatalog(),
                  new DefaultMutableTreeNode(tableDescription.getCatalog()));
              rootNode.add(catalogNodes.get(tableDescription.getCatalog()));
            }
          }
          String sch = "\"" + tableDescription.getCatalog() + "\".\"" + tableDescription.getSchema() + "\"";
          if (sc.isShowSchema(tableDescription.getCatalog(), tableDescription.getSchema())) {
            if (!schemaNodes.containsKey(sch)) {
              DefaultMutableTreeNode dmn = new DefaultMutableTreeNode(tableDescription.getSchema());
              schemaNodes.put(sch, dmn);
              if (sc.isShowCatalog(tableDescription.getCatalog())) {
                rootNode.add(dmn);
              } else {
                catalogNodes.get(tableDescription.getCatalog()).add(dmn);
              }
            }
          }
          String tt = sch + ".\"" + tableDescription.getTableType() + "\"";
          final DefaultMutableTreeNode tableTypeNode;
          if (!tableTypesNodes.containsKey(tt)) {
            tableTypeNode = new DefaultMutableTreeNode(tableDescription.getTableType());
            tableTypesNodes.put(tt, tableTypeNode);
            if (sc.isShowSchema(tableDescription.getCatalog(), tableDescription.getSchema())) {
              schemaNodes.get(sch).add(tableTypeNode);
            } else if (sc.isShowCatalog(tableDescription.getCatalog())) {
              catalogNodes.get(tableDescription.getCatalog()).add(tableTypeNode);
            } else {
              rootNode.add(tableTypeNode);
            }
          } else {
            tableTypeNode = tableTypesNodes.get(tt);
          }
          tableTypeNode.add(new DefaultMutableTreeNode(tableDescription));
        }
      }
    }
    jTree1.setModel(model);
    jTree1.setRootVisible(false);
  }

  @Override
  public void componentClosed() {
    // TODO add custom code on component closing
  }

  public void selectTable(TableDescription td) {
    ChosenTable.getInstance().setTableDescription(td);
  }

  void writeProperties(java.util.Properties p) {
    // better to version settings since initial version as advocated at
    // http://wiki.apidesign.org/wiki/PropertyFiles
    p.setProperty("version", "1.0");
    // TODO store your settings
  }

  void readProperties(java.util.Properties p) {
    String version = p.getProperty("version");
    // TODO read your settings according to their version
  }

  @Override
  public void sessionConfigurationChanged(SessionConfiguration sc) {
    this.sc = sc;
    this.showStructure(sc);
  }
}
