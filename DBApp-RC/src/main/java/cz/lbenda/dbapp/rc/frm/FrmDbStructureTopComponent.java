/*
 * Copyright 2014 Lukas Benda <lbenda at lbenda.cz>.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package cz.lbenda.dbapp.rc.frm;

import cz.lbenda.dbapp.rc.SessionConfiguration;

import java.awt.*;

import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//cz.lbenda.applicationdb.rc.frm//FrmDbStructure//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "FrmDbStructureTopComponent",
        iconBase = "cz/lbenda/dbapp/rc/frm/structure.png",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "explorer", openAtStartup = true)
@ActionID(category = "Window", id = "cz.lbenda.applicationdb.rc.frm.FrmDbStructureTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_FrmDbStructureAction",
        preferredID = "FrmDbStructureTopComponent"
)
@Messages({
  "CTL_FrmDbStructureAction=Struktura",
  "CTL_FrmDbStructureTopComponent=Struktura",
  "HINT_FrmDbStructureTopComponent=Struktura datab√°ze"
})
public final class FrmDbStructureTopComponent extends TopComponent implements ExplorerManager.Provider, ChosenTable.ConfigurationUpdateListener {

  private static final Logger LOG = LoggerFactory.getLogger(FrmDbStructureTopComponent.class);
  private static ExplorerManager em = new ExplorerManager();

  private SessionConfiguration sc = null;

  public FrmDbStructureTopComponent() {
    initComponents();
    setName(Bundle.CTL_FrmDbStructureTopComponent());
    setToolTipText(Bundle.HINT_FrmDbStructureTopComponent());
    setLayout(new BorderLayout());
    BeanTreeView btw = new BeanTreeView();
    btw.setRootVisible(false);
    add(btw, BorderLayout.CENTER);
    refreshNode();
    associateLookup(ExplorerUtils.createLookup(em, getActionMap()));
    ChosenTable.getInstance().addConfigurationUpdateListener(this);
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT
   * modify this code. The content of this method is always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 400, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 300, Short.MAX_VALUE)
    );
    refreshNode();
  }// </editor-fold>//GEN-END:initComponents

  private void refreshNode() {
    em.setRootContext(new StructureChildFactory.RootNode());
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  // End of variables declaration//GEN-END:variables
  @Override
  public void componentOpened() {
    refreshNode();
  }

  @Override
  public ExplorerManager getExplorerManager() {
    return em;
  }

  @Override
  public void componentClosed() {
    // TODO add custom code on component closing
  }

   void writeProperties(java.util.Properties p) {
    // better to version settings since initial version as advocated at
    // http://wiki.apidesign.org/wiki/PropertyFiles
    p.setProperty("version", "1.0");
    // TODO store your settings
  }

  void readProperties(java.util.Properties p) {
    String version = p.getProperty("version");
    // TODO read your settings according to their version
  }

  @Override
  public void configurationChanged() {
    this.refreshNode();
  }
}
